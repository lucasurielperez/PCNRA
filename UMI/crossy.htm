<!DOCTYPE html>
<html>
<head>
    <title>Crossy Road Clone</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            touch-action: none;
        }
        #gameContainer {
            position: relative;
            width: 100vw;
            height: 100vh;
            background: #70c5ce;
            overflow: hidden;
        }
        #player {
            position: absolute;
            width: 50px;
            height: 50px;
            z-index: 100;
        }
        .road {
            position: absolute;
            width: 100%;
            height: 50px;
        }
        .obstacle {
            position: absolute;
            width: 50px;
            height: 50px;
            background: #FF4500;
            z-index: 10;
        }
        @keyframes jump {
            0% { transform: translateY(0); }
            50% { transform: translateY(-20px); }
            100% { transform: translateY(0); }
        }
        .jumping {
            animation: jump 0.3s ease-in-out;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <img id="player" src="images/player.png">
    </div>

    <script>
        const gameContainer = document.getElementById('gameContainer');
        let player = document.getElementById('player');
        const containerWidth = window.innerWidth;
        const containerHeight = window.innerHeight;
        const halfHeight = containerHeight / 2;

        // Manejo del jugador con fallback
        function setupPlayer() {
            const img = new Image();
            img.src = 'images/player.png';
            
            img.onload = function() {
                player = document.getElementById('player');
                updatePlayerPosition();
            };
            
            img.onerror = function() {
                const canvasPlayer = document.createElement('canvas');
                canvasPlayer.id = 'player';
                canvasPlayer.width = 50;
                canvasPlayer.height = 50;
                const ctx = canvasPlayer.getContext('2d');
                ctx.fillStyle = '#FF0000';
                ctx.fillRect(10, 10, 30, 30);
                gameContainer.appendChild(canvasPlayer);
                const oldPlayer = document.getElementById('player');
                if (oldPlayer) oldPlayer.remove();
                player = canvasPlayer;
                updatePlayerPosition();
            };
        }

        // Configuración inicial del jugador
        let playerPos = {
            x: containerWidth / 2 - 25,
            y: containerHeight - 100
        };

        // Carreteras y obstáculos
        const roads = [];
        const obstacles = [];
        const roadHeight = 50;
        const totalRoads = Math.ceil(containerHeight / roadHeight) + 1;

        function createRoad(y, type) {
            let road;
            const img = new Image();
            img.src = `images/road${type}.png`;
            
            img.onerror = function() {
                road = document.createElement('canvas');
                road.width = containerWidth;
                road.height = 50;
                const ctx = road.getContext('2d');
                ctx.fillStyle = type === 0 ? '#808080' : '#90EE90';
                ctx.fillRect(0, 0, containerWidth, 50);
                road.className = 'road';
                road.style.top = `${y}px`;
                gameContainer.appendChild(road);
            };
            
            img.onload = function() {
                road = img;
                road.className = 'road';
                road.style.top = `${y}px`;
                gameContainer.appendChild(road);
            };
            
            roads.push({ element: road, y: y, type: type });
        }

        function createObstacle(y) {
            const obstacle = document.createElement('div');
            obstacle.className = 'obstacle';
            obstacle.style.top = `${y}px`;
            obstacle.style.left = `${Math.random() * (containerWidth - 50)}px`;
            let speed = (Math.random() > 0.5 ? 3 : -3);
            gameContainer.appendChild(obstacle);
            obstacles.push({ element: obstacle, x: parseFloat(obstacle.style.left), y: y, speed });
        }

        for (let i = 0; i < totalRoads; i++) {
            const type = Math.floor(Math.random() * 2);
            createRoad(i * roadHeight, type);
            if (type === 0 && Math.random() > 0.7) createObstacle(i * roadHeight);
        }

        // Actualizar posición del jugador
        function updatePlayerPosition() {
            if (player) {
                player.style.left = `${playerPos.x}px`;
                player.style.top = `${playerPos.y}px`;
            }
        }

        // Movimiento del jugador con salto
        function movePlayer(direction) {
            const step = 50;
            player.classList.add('jumping');
            setTimeout(() => player.classList.remove('jumping'), 300);

            switch(direction) {
                case 'up':
                    if (playerPos.y > 0) playerPos.y -= step;
                    break;
                case 'down':
                    if (playerPos.y < containerHeight - 50) playerPos.y += step;
                    break;
                case 'left':
                    if (playerPos.x > 0) playerPos.x -= step;
                    break;
                case 'right':
                    if (playerPos.x < containerWidth - 50) playerPos.x += step;
                    break;
            }
            updatePlayerPosition();
        }

        // Controles para teclado (PC)
        document.addEventListener('keydown', (e) => {
            switch(e.key) {
                case 'ArrowUp': movePlayer('up'); break;
                case 'ArrowDown': movePlayer('down'); break;
                case 'ArrowLeft': movePlayer('left'); break;
                case 'ArrowRight': movePlayer('right'); break;
            }
        });

        // Controles táctiles con gestos
        let touchStartX = 0;
        let touchStartY = 0;

        gameContainer.addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
            movePlayer('up'); // Tocar avanza hacia arriba
        });

        gameContainer.addEventListener('touchmove', (e) => {
            e.preventDefault();
            const touchEndX = e.touches[0].clientX;
            const touchEndY = e.touches[0].clientY;
            const dx = touchEndX - touchStartX;
            const dy = touchEndY - touchStartY;

            // Detectar deslizamiento (umbral de 30px para evitar movimientos accidentales)
            if (Math.abs(dx) > 30 || Math.abs(dy) > 30) {
                if (Math.abs(dx) > Math.abs(dy)) {
                    // Deslizamiento horizontal
                    if (dx > 0) movePlayer('right');
                    else movePlayer('left');
                } else {
                    // Deslizamiento vertical
                    if (dy > 0) movePlayer('down');
                }
                // Reiniciar posición inicial para evitar múltiples movimientos
                touchStartX = touchEndX;
                touchStartY = touchEndY;
            }
        });

        gameContainer.addEventListener('touchend', (e) => {
            e.preventDefault();
        });

        // Scroll del terreno y obstáculos
        function updateGame() {
            if (playerPos.y < halfHeight) {
                roads.forEach(road => {
                    road.y += 2;
                    road.element.style.top = `${road.y}px`;
                    if (road.y > containerHeight) {
                        road.y -= totalRoads * roadHeight;
                        road.type = Math.floor(Math.random() * 2);
                        if (road.element.tagName === 'CANVAS') {
                            const ctx = road.element.getContext('2d');
                            ctx.fillStyle = road.type === 0 ? '#808080' : '#90EE90';
                            ctx.fillRect(0, 0, containerWidth, 50);
                        } else {
                            road.element.src = `images/road${road.type}.png`;
                        }
                        if (road.type === 0 && Math.random() > 0.7) createObstacle(road.y);
                    }
                });

                obstacles.forEach(obstacle => {
                    obstacle.y += 2;
                    obstacle.element.style.top = `${obstacle.y}px`;
                });
            }

            obstacles.forEach((obstacle, index) => {
                obstacle.x += obstacle.speed;
                obstacle.element.style.left = `${obstacle.x}px`;
                if (obstacle.x < -50 || obstacle.x > containerWidth) {
                    obstacle.element.remove();
                    obstacles.splice(index, 1);
                }

                if (playerPos.x < obstacle.x + 50 && playerPos.x + 50 > obstacle.x &&
                    playerPos.y < obstacle.y + 50 && playerPos.y + 50 > obstacle.y) {
                    alert('¡Perdiste!');
                    location.reload();
                }
            });

            requestAnimationFrame(updateGame);
        }

        // Iniciar el juego
        setupPlayer();
        requestAnimationFrame(updateGame);
    </script>
</body>
</html>