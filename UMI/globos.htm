<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Juego de Globos y Huevos</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: #87CEEB;
            height: 100vh;
            position: fixed; /* Evita desplazamiento */
            touch-action: none; /* Bloquea gestos táctiles no deseados */
        }
        .balloon-container {
            position: absolute;
            cursor: pointer;
        }
        .balloon {
            width: 75px;
            height: 105px;
            border-radius: 50% 50% 20% 20% / 70% 70% 30% 30%; /* Forma de pera invertida */
            position: relative;
        }
        .balloon::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 5px transparent solid;
            border-right: 5px transparent solid;
            border-top: 10px solid;
            border-top-color: inherit;
        }
        .string {
            position: absolute;
            width: 2px;
            height: 45px;
            background: white;
            bottom: -55px;
            left: 50%;
            transform: translateX(-50%);
        }
        .egg {
            position: absolute;
            width: 30px;
            height: 40px;
            background: #FFF8DC;
            border-radius: 50%;
            cursor: pointer;
        }
        .confetti {
            position: absolute;
            width: 0;
            height: 0;
            border-style: solid;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <canvas id="canvas" style="position: absolute; top: 0; left: 0;"></canvas>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const colors = ['#FF5733', '#33FF57', '#3357FF', '#FF33A1', '#FFFF33'];
        const maxItems = 10;
        let balloons = [];
        let eggs = [];
        let confetti = [];

        class Balloon {
            constructor(x, y, color) {
                this.x = x;
                this.y = y;
                this.color = color;
                this.speedY = -2 - Math.random() * 2;
                this.speedX = (Math.random() - 0.5) * 4;
                this.scale = 1 + Math.random() * 0.5;
                this.element = document.createElement('div');
                this.element.className = 'balloon-container';
                this.element.innerHTML = `<div class="balloon" style="background-color: ${this.color}; transform: scale(${this.scale}); transform-origin: bottom;"></div><div class="string" style="height: ${45 * this.scale}px; bottom: ${-55 * this.scale}px;"></div>`;
                this.element.style.left = `${this.x}px`;
                this.element.style.top = `${this.y}px`;
                document.body.appendChild(this.element);
                this.element.addEventListener('click', () => this.pop(), { once: true });
            }

            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                this.speedX += (Math.random() - 0.5) * 0.5;
                this.speedX = Math.max(-3, Math.min(3, this.speedX));
                const balloonWidth = 75 * this.scale;
                if (this.x < 0) this.x = 0;
                if (this.x > canvas.width - balloonWidth) this.x = canvas.width - balloonWidth;
                if (this.y < -105 * this.scale - 45 * this.scale) this.remove();
                this.element.style.left = `${this.x}px`;
                this.element.style.top = `${this.y}px`;
            }

            pop() {
                for (let i = 0; i < 20; i++) {
                    confetti.push(new Confetti(this.x + (75 * this.scale) / 2, this.y + (105 * this.scale) / 2, this.color));
                }
                if (eggs.length + balloons.length < maxItems) {
                    eggs.push(new Egg(this.x + (75 * this.scale) / 2 - 15, this.y + 105 * this.scale));
                }
                this.remove();
            }

            remove() {
                document.body.removeChild(this.element);
                balloons = balloons.filter(b => b !== this);
            }
        }

        class Egg {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.speedY = 0;
                this.speedX = (Math.random() - 0.5) * 2;
                this.element = document.createElement('div');
                this.element.className = 'egg';
                this.element.style.left = `${this.x}px`;
                this.element.style.top = `${this.y}px`;
                document.body.appendChild(this.element);
                this.element.addEventListener('click', () => this.breakEgg(), { once: true });
            }

            update() {
                this.speedY += 0.3;
                this.y += this.speedY;
                this.x += this.speedX;
                this.speedX *= 0.98;

                if (this.x < 0) this.x = 0;
                if (this.x > canvas.width - 30) this.x = canvas.width - 30;
                if (this.y > canvas.height - 40) {
                    this.y = canvas.height - 40;
                    this.speedY *= -0.5;
                    this.speedX *= 0.9;
                }

                eggs.forEach(other => {
                    if (other !== this) {
                        const dx = this.x - other.x;
                        const dy = this.y - other.y;
                        const dist = Math.sqrt(dx * dx + dy * dy);
                        if (dist < 30) {
                            this.speedX += dx * 0.1;
                            other.speedX -= dx * 0.1;
                        }
                    }
                });

                this.element.style.left = `${this.x}px`;
                this.element.style.top = `${this.y}px`;
            }

            breakEgg() {
                if (eggs.length + balloons.length <= maxItems) {
                    balloons.push(new Balloon(this.x, this.y, colors[Math.floor(Math.random() * colors.length)]));
                }
                this.remove();
            }

            remove() {
                document.body.removeChild(this.element);
                eggs = eggs.filter(e => e !== this);
            }
        }

        class Confetti {
            constructor(x, y, color) {
                this.x = x;
                this.y = y;
                this.color = color;
                this.speedX = (Math.random() - 0.5) * 6;
                this.speedY = (Math.random() - 0.5) * 6;
                this.life = 60;
                // Triángulo escaleno con lados aleatorios hasta 5px
                const side1 = Math.random() * 5;
                const side2 = Math.random() * 5;
                const side3 = Math.random() * 5;
                this.element = document.createElement('div');
                this.element.className = 'confetti';
                this.element.style.borderWidth = `${side1}px ${side2}px ${side3}px 0`;
                this.element.style.borderColor = `${this.color} transparent transparent transparent`;
                this.element.style.left = `${this.x}px`;
                this.element.style.top = `${this.y}px`;
                document.body.appendChild(this.element);
            }

            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                this.speedY += 0.1;
                this.life--;
                if (this.life <= 0) this.remove();
                this.element.style.left = `${this.x}px`;
                this.element.style.top = `${this.y}px`;
            }

            remove() {
                document.body.removeChild(this.element);
                confetti = confetti.filter(c => c !== this);
            }
        }

        function spawnInitialEggs() {
            for (let i = 0; i < maxItems; i++) {
                const x = (canvas.width / (maxItems + 1)) * (i + 1) - 15;
                const y = canvas.height - 40;
                eggs.push(new Egg(x, y));
            }
        }

        function gameLoop() {
            balloons.forEach(b => b.update());
            eggs.forEach(e => e.update());
            confetti.forEach(c => c.update());
            requestAnimationFrame(gameLoop);
        }

        window.onload = () => {
            spawnInitialEggs();
            gameLoop();
        };

        window.onresize = () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        };
    </script>
</body>
</html>