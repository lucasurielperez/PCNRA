<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Juego de Sonido - Morse</title>
    <style>
        body {
            margin: 0;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #000;
        }
        #morse-box {
            width: 300px;
            height: 150px;
            background-color: #000;
            border: 2px solid #00ff00;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            font-family: monospace;
            font-size: 40px;
            color: #00ff00;
            text-align: center;
        }
        #speaker {
            font-size: 30px;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div id="morse-box">
        <div>morse</div>
        <div id="speaker">🔊</div>
    </div>

    <script>
        // Creamos un contexto de audio
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();

        // Definimos el mensaje "Papico" en código Morse con duraciones 3 veces más lentas
        const morseCode = {
            'P': [600, 300, 1800, 300, 1800, 300, 600], // .--.
            'A': [600, 300, 1800],                        // .-
            'P': [600, 300, 1800, 300, 1800, 300, 600],  // .--.
            'I': [600, 300, 600],                        // ..
            'C': [1800, 300, 600, 300, 1800, 300, 600],  // -.-.
            'O': [1800, 300, 1800, 300, 1800]            // ---
        };

        // Función para generar un pitido
        function playBeep(duration) {
            const oscillator = audioContext.createOscillator();
            oscillator.type = 'sine'; // Onda senoidal para un sonido limpio
            oscillator.frequency.value = 800; // Frecuencia en Hz (un tono agudo pero claro)
            oscillator.connect(audioContext.destination);
            oscillator.start();
            setTimeout(() => oscillator.stop(), duration);
        }

        // Función para reproducir una letra en Morse
        async function playLetter(letter) {
            const pattern = morseCode[letter] || [];
            for (let i = 0; i < pattern.length; i++) {
                if (i % 2 === 0) {
                    playBeep(pattern[i]); // Reproducir punto o raya
                }
                await new Promise(resolve => setTimeout(resolve, pattern[i])); // Esperar el tiempo
            }
        }

        // Función para reproducir la palabra completa "Papico"
        async function playPapico() {
            const word = "PAPICO";
            for (let i = 0; i < word.length; i++) {
                await playLetter(word[i]);
                if (i < word.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 900)); // Pausa entre letras (3x más lenta)
                }
            }
        }

        // Repetir el mensaje cada 3 segundos después de terminar
        async function startMorseLoop() {
            while (true) {
                await playPapico();
                const duration = "PAPICO".split('').reduce((total, letter) => {
                    return total + morseCode[letter].reduce((sum, time) => sum + time, 0) + 900;
                }, 0) - 900; // Restamos la última pausa entre letras
                await new Promise(resolve => setTimeout(resolve, 3000)); // Pausa de 3 segundos
            }
        }

        // Iniciar el juego tras interacción del usuario
        document.addEventListener('click', () => {
            if (audioContext.state === 'suspended') {
                audioContext.resume(); // Activar el audio en iOS tras interacción
            }
            startMorseLoop();
        }, { once: true });
    </script>
</body>
</html>