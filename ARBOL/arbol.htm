<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Limonero Interactivo</title>
  <style>
    body { margin: 0; font-family: Arial, sans-serif; }
    canvas { width: 100%; height: 70vh; display: block; }
    #instructions { text-align: center; font-size: 1.2em; padding: 10px; }
    #progress-container { width: 80%; margin: 10px auto; }
    #progress-bar { width: 0%; height: 20px; background-color: #4CAF50; transition: width 0.3s; }
    #progress-container { border: 2px solid #333; border-radius: 5px; }
    #request-permission { display: block; margin: 20px auto; padding: 10px; font-size: 1em; }
  </style>
</head>
<body>
  <canvas id="treeCanvas"></canvas>
  <div id="instructions">Haz clic para permitir el sensor de movimiento</div>
  <button id="request-permission">Permitir movimiento</button>
  <div id="progress-container">
    <div id="progress-bar"></div>
  </div>
  <script>
    const canvas = document.getElementById('treeCanvas');
    const ctx = canvas.getContext('2d');
    const instructions = document.getElementById('instructions');
    const progressBar = document.getElementById('progress-bar');
    const requestButton = document.getElementById('request-permission');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight * 0.7;

    let stage = 0;
    let progress = 0;
    let motionPermissionGranted = false;
    const stages = [
      "Ara la tierra moviendo el celular",
      "Riega la planta con ruido de agua",
      "Dale luz al brote con la cámara",
      "Protege del viento manteniendo el celular quieto",
      "Nutre el suelo tocando la pantalla",
      "Poda las ramas inclinando el celular",
      "Ahuyenta plagas con un grito",
      "Dale más luz para las flores",
      "Poliniza agitando el celular",
      "Cosecha los limones tocándolos"
    ];

    // Cargar imágenes (ajusta las rutas si las tienes)
    const images = [];
    for (let i = 0; i < 10; i++) {
      images[i] = new Image();
      images[i].src = `stage${i}.png`; // Asume imágenes predefinidas
    }

    function drawTree() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (images[stage].complete) {
        ctx.drawImage(images[stage], canvas.width / 4, 0, canvas.width / 2, canvas.height);
      } else {
        ctx.fillText(`Etapa ${stage}`, canvas.width / 2, canvas.height / 2); // Fallback
      }
    }

    function updateProgressBar() {
      progressBar.style.width = `${Math.min(progress * 100, 100)}%`;
    }

    function showSuccessAndNext() {
      instructions.textContent = "¡Lo lograste!";
      progress = 1; // Barra al 100%
      updateProgressBar();
      setTimeout(() => {
        stage++;
        progress = 0;
        updateProgressBar();
        if (stage < stages.length) {
          instructions.textContent = stages[stage];
          drawTree();
        } else {
          instructions.textContent = "¡Felicidades! Cosechaste los limones.";
        }
      }, 1500); // 1.5 segundos de retraso
    }

    // Solicitar permiso para sensores en iOS
    function requestMotionPermission() {
      if (typeof DeviceMotionEvent.requestPermission === 'function') {
        DeviceMotionEvent.requestPermission()
          .then(permissionState => {
            if (permissionState === 'granted') {
              motionPermissionGranted = true;
              instructions.textContent = stages[0];
              requestButton.style.display = 'none';
              startMotionDetection();
            } else {
              instructions.textContent = "Permiso denegado. Habilítalo en Ajustes > Safari.";
            }
          })
          .catch(err => instructions.textContent = "Error: " + err.message);
      } else {
        motionPermissionGranted = true;
        instructions.textContent = stages[0];
        requestButton.style.display = 'none';
        startMotionDetection();
      }
    }

    // Iniciar detección de movimiento
    function startMotionDetection() {
      let shakes = 0;
      window.addEventListener('devicemotion', (event) => {
        if (stage === 0 && motionPermissionGranted) {
          if (!event.acceleration) {
            instructions.textContent = "No se detecta aceleración.";
            return;
          }
          const accX = event.acceleration.x || 0;
          const accY = event.acceleration.y || 0;
          const accZ = event.acceleration.z || 0;
          instructions.textContent = `Ara la tierra - X: ${accX.toFixed(2)}, Y: ${accY.toFixed(2)}, Z: ${accZ.toFixed(2)}`;
          if (Math.abs(accX) > 3 || Math.abs(accY) > 3 || Math.abs(accZ) > 3) {
            shakes++;
            progress = shakes / 10;
            updateProgressBar();
            if (shakes >= 10) {
              showSuccessAndNext();
            }
          }
        }
      }, { passive: true });
    }

    // Etapa 2: Sonido (regar)
    function startSoundDetection() {
      navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
          const audioContext = new AudioContext();
          const source = audioContext.createMediaStreamSource(stream);
          const analyser = audioContext.createAnalyser();
          analyser.fftSize = 2048; // Tamaño de la muestra
          source.connect(analyser);
          const dataArray = new Uint8Array(analyser.frequencyBinCount);

          function checkSound() {
            if (stage === 1) {
              analyser.getByteFrequencyData(dataArray);
              let volume = dataArray.reduce((a, b) => a + b) / dataArray.length;
              instructions.textContent = `Riega la planta - Volumen: ${volume.toFixed(2)}`;
              if (volume > 30) { // Umbral más bajo para iPhone
                progress += 0.1;
                updateProgressBar();
                if (progress >= 1) {
                  showSuccessAndNext();
                }
              }
            }
            requestAnimationFrame(checkSound);
          }
          checkSound();
        })
        .catch(err => {
          instructions.textContent = "Error con el micrófono: " + err.message;
          if (err.name === "NotAllowedError") {
            instructions.textContent = "Permiso de micrófono denegado. Habilítalo en Ajustes.";
          }
        });
    }

    // Botón para permisos de movimiento
    requestButton.addEventListener('click', () => {
      requestMotionPermission();
      startSoundDetection(); // Inicia sonido después de movimiento
    });

    drawTree();
    updateProgressBar();
  </script>
</body>
</html>