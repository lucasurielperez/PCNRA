<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formas Colisionando</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #f0f0f0;
        }
        #container {
            position: relative;
            width: 100vw;
            height: 100vh;
        }
        .shape {
            position: absolute;
        }
        .circle {
            border-radius: 50%;
        }
        .square {
            border-radius: 0;
        }
        .star {
            clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
        }
        .triangle {
            clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
        }
        .heart {
            clip-path: polygon(
                50% 20%,
                70% 10%,
                90% 20%,
                100% 40%,
                90% 60%,
                70% 70%,
                50% 90%,
                30% 70%,
                10% 60%,
                0% 40%,
                10% 20%,
                30% 10%
            );
        }
    </style>
</head>
<body>
    <div id="container"></div>

    <script>
        const container = document.getElementById('container');
        let shapes = [];
        let lastShakeTime = 0;
        const shakeCooldown = 500; // 500ms entre shakes
        let touchCount = 0;
        const resetThreshold = 3; // Número de toques para resetear
        const shapeTypes = ['circle', 'square', 'star', 'triangle', 'heart'];

        // Detectar movimiento del dispositivo
        window.addEventListener('devicemotion', handleMotion);

        function handleMotion(event) {
            const currentTime = Date.now();
            if (currentTime - lastShakeTime < shakeCooldown) return;

            const acceleration = event.accelerationIncludingGravity;
            const threshold = 15;

            if (acceleration.x > threshold || acceleration.y > threshold || acceleration.z > threshold) {
                createShape();
                lastShakeTime = currentTime;
            }
        }

        function createShape() {
            const shape = document.createElement('div');
            shape.className = 'shape';
            
            // Forma aleatoria
            const randomShape = shapeTypes[Math.floor(Math.random() * shapeTypes.length)];
            shape.classList.add(randomShape);
            
            // Color aleatorio
            const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16);
            shape.style.backgroundColor = randomColor;
            
            // Tamaño aleatorio (entre 30px y 100px)
            const size = Math.floor(Math.random() * (100 - 30 + 1)) + 30;
            shape.style.width = size + 'px';
            shape.style.height = size + 'px';
            
            // Posición inicial aleatoria
            const maxX = window.innerWidth - size;
            const maxY = window.innerHeight - size;
            shape.x = Math.random() * maxX;
            shape.y = Math.random() * maxY;
            shape.style.left = shape.x + 'px';
            shape.style.top = shape.y + 'px';
            
            // Velocidad aleatoria
            shape.dx = (Math.random() - 0.5) * 8;
            shape.dy = (Math.random() - 0.5) * 8;
            shape.size = size;

            container.appendChild(shape);
            shapes.push(shape);
        }

        function checkCollision(shape1, shape2) {
            const dx = (shape1.x + shape1.size/2) - (shape2.x + shape2.size/2);
            const dy = (shape1.y + shape1.size/2) - (shape2.y + shape2.size/2);
            const distance = Math.sqrt(dx * dx + dy * dy);
            const minDistance = (shape1.size + shape2.size) / 2;

            if (distance < minDistance) {
                // Calcular ángulo de colisión
                const angle = Math.atan2(dy, dx);
                const sin = Math.sin(angle);
                const cos = Math.cos(angle);

                // Intercambiar velocidades (colisión elástica simple)
                const tempDx1 = shape1.dx;
                const tempDy1 = shape1.dy;
                shape1.dx = shape2.dx * cos - shape2.dy * sin;
                shape1.dy = shape2.dx * sin + shape2.dy * cos;
                shape2.dx = tempDx1 * cos - tempDy1 * sin;
                shape2.dy = tempDx1 * sin + tempDy1 * cos;

                // Separar las formas para evitar que se queden pegadas
                const overlap = minDistance - distance;
                shape1.x += (overlap * cos) / 2;
                shape1.y += (overlap * sin) / 2;
                shape2.x -= (overlap * cos) / 2;
                shape2.y -= (overlap * sin) / 2;
            }
        }

        // Animación de las formas
        function animate() {
            // Actualizar posiciones y colisiones con bordes
            shapes.forEach(shape => {
                shape.x += shape.dx;
                shape.y += shape.dy;

                // Colisión con bordes
                if (shape.x + shape.size > window.innerWidth || shape.x < 0) {
                    shape.dx = -shape.dx;
                }
                if (shape.y + shape.size > window.innerHeight || shape.y < 0) {
                    shape.dy = -shape.dy;
                }

                // Mantener dentro de los límites
                shape.x = Math.max(0, Math.min(shape.x, window.innerWidth - shape.size));
                shape.y = Math.max(0, Math.min(shape.y, window.innerHeight - shape.size));
            });

            // Verificar colisiones entre formas
            for (let i = 0; i < shapes.length; i++) {
                for (let j = i + 1; j < shapes.length; j++) {
                    checkCollision(shapes[i], shapes[j]);
                }
            }

            // Aplicar nuevas posiciones
            shapes.forEach(shape => {
                shape.style.left = shape.x + 'px';
                shape.style.top = shape.y + 'px';
            });

            requestAnimationFrame(animate);
        }

        // Resetear al tocar varias veces
        document.addEventListener('touchstart', function(e) {
            e.preventDefault();
            touchCount++;
            
            if (touchCount >= resetThreshold) {
                shapes.forEach(shape => container.removeChild(shape));
                shapes = [];
                touchCount = 0;
            }
            
            // Reiniciar contador después de 1 segundo sin toques
            setTimeout(() => {
                touchCount = 0;
            }, 1000);
        }, { passive: false });

        // Solicitar permiso para el sensor en iOS
        if (typeof DeviceMotionEvent.requestPermission === 'function') {
            document.body.addEventListener('click', function() {
                DeviceMotionEvent.requestPermission()
                    .then(permissionState => {
                        if (permissionState === 'granted') {
                            window.addEventListener('devicemotion', handleMotion);
                        }
                    })
                    .catch(console.error);
            }, { once: true });
        }

        // Iniciar animación
        animate();
    </script>
</body>
</html>